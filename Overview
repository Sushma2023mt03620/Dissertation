import React, { useState, useEffect } from 'react';
import { Play, Pause, RotateCcw, CheckCircle, AlertTriangle, Cloud, Database, Shield, Monitor, Settings, Users, DollarSign } from 'lucide-react';

const AutomotiveLandingZoneDemo = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [simulationRunning, setSimulationRunning] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [deploymentProgress, setDeploymentProgress] = useState(0);
  const [metricsData, setMetricsData] = useState({
    vehicles: 15420,
    dataIngestion: 2.4,
    alerts: 3,
    costs: 45600,
    compliance: 98.5,
    uptime: 99.99
  });

  const deploymentSteps = [
    { name: 'Management Groups Setup', duration: 2000, status: 'pending' },
    { name: 'Network Infrastructure', duration: 3000, status: 'pending' },
    { name: 'Security Services', duration: 2500, status: 'pending' },
    { name: 'Shared Services', duration: 2000, status: 'pending' },
    { name: 'IoT Platform', duration: 3500, status: 'pending' },
    { name: 'AI/ML Services', duration: 3000, status: 'pending' },
    { name: 'Monitoring Setup', duration: 2000, status: 'pending' },
    { name: 'Application Deployment', duration: 4000, status: 'pending' }
  ];

  const [steps, setSteps] = useState(deploymentSteps);

  useEffect(() => {
    let interval;
    if (simulationRunning && currentStep < steps.length) {
      const currentStepData = steps[currentStep];
      interval = setTimeout(() => {
        setSteps(prev => 
          prev.map((step, index) => 
            index === currentStep 
              ? { ...step, status: 'completed' }
              : index < currentStep 
                ? { ...step, status: 'completed' }
                : step
          )
        );
        setCurrentStep(prev => prev + 1);
        setDeploymentProgress(prev => prev + (100 / deploymentSteps.length));
      }, currentStepData.duration);
    } else if (currentStep >= steps.length) {
      setSimulationRunning(false);
    }
    return () => clearTimeout(interval);
  }, [simulationRunning, currentStep, steps.length]);

  useEffect(() => {
    const interval = setInterval(() => {
      if (simulationRunning) {
        setMetricsData(prev => ({
          vehicles: prev.vehicles + Math.floor(Math.random() * 10),
          dataIngestion: +(prev.dataIngestion + (Math.random() - 0.5) * 0.1).toFixed(1),
          alerts: Math.max(0, prev.alerts + (Math.random() > 0.8 ? 1 : -1)),
          costs: +(prev.costs + (Math.random() - 0.5) * 100).toFixed(0),
          compliance: Math.min(100, Math.max(95, prev.compliance + (Math.random() - 0.5) * 0.5)).toFixed(1),
          uptime: Math.min(100, Math.max(99, prev.uptime + (Math.random() - 0.5) * 0.01)).toFixed(2)
        }));
      }
    }, 2000);
    return () => clearInterval(interval);
  }, [simulationRunning]);

  const startSimulation = () => {
    setSimulationRunning(true);
    setCurrentStep(0);
    setDeploymentProgress(0);
    setSteps(deploymentSteps.map(step => ({ ...step, status: 'pending' })));
  };

  const resetSimulation = () => {
    setSimulationRunning(false);
    setCurrentStep(0);
    setDeploymentProgress(0);
    setSteps(deploymentSteps.map(step => ({ ...step, status: 'pending' })));
    setMetricsData({
      vehicles: 15420,
      dataIngestion: 2.4,
      alerts: 3,
      costs: 45600,
      compliance: 98.5,
      uptime: 99.99
    });
  };

  const architectureComponents = [
    {
      id: 'management',
      name: 'Management Groups',
      description: 'Hierarchical organization of subscriptions with policy inheritance',
      status: steps[0]?.status || 'pending',
      details: [
        'Root Management Group with governance policies',
        'Platform services organization',
        'Landing zone separation by environment',
        'Sandbox environments for innovation'
      ]
    },
    {
      id: 'network',
      name: 'Network Architecture',
      description: 'Hub-spoke topology with centralized security',
      status: steps[1]?.status || 'pending',
      details: [
        'Azure Virtual WAN for global connectivity',
        'Hub VNet with shared services',
        'Spoke VNets for application isolation',
        'Azure Firewall for network security'
      ]
    },
    {
      id: 'security',
      name: 'Security Services',
      description: 'Comprehensive security framework',
      status: steps[2]?.status || 'pending',
      details: [
        'Azure AD with Conditional Access',
        'Azure Sentinel SIEM integration',
        'Key Vault for secrets management',
        'Policy-driven compliance enforcement'
      ]
    },
    {
      id: 'shared',
      name: 'Shared Services',
      description: 'Centralized platform services',
      status: steps[3]?.status || 'pending',
      details: [
        'Container registry and artifact management',
        'Centralized logging and monitoring',
        'CI/CD pipeline infrastructure',
        'Backup and disaster recovery'
      ]
    },
    {
      id: 'iot',
      name: 'IoT Platform',
      description: 'Connected vehicle data processing',
      status: steps[4]?.status || 'pending',
      details: [
        'IoT Hub for device management',
        'Event Hubs for high-throughput ingestion',
        'Stream Analytics for real-time processing',
        'Data Lake for long-term storage'
      ]
    },
    {
      id: 'ai',
      name: 'AI/ML Services',
      description: 'Machine learning platform for automotive AI',
      status: steps[5]?.status || 'pending',
      details: [
        'Azure Machine Learning workspace',
        'MLOps pipeline for model deployment',
        'Computer vision for autonomous driving',
        'Predictive maintenance models'
      ]
    }
  ];

  const complianceItems = [
    { name: 'GDPR Compliance', status: 'compliant', score: 98 },
    { name: 'ISO 27001', status: 'compliant', score: 96 },
    { name: 'TISAX Certification', status: 'compliant', score: 99 },
    { name: 'ISO 26262 (Functional Safety)', status: 'warning', score: 92 },
    { name: 'SOC 2 Type II', status: 'compliant', score: 97 }
  ];

  const TabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-6 p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-blue-900">Connected Vehicles</h3>
                  <Cloud className="text-blue-600" size={24} />
                </div>
                <div className="text-2xl font-bold text-blue-900">{metricsData.vehicles.toLocaleString()}</div>
                <div className="text-sm text-blue-600">Active fleet vehicles</div>
              </div>
              
              <div className="bg-green-50 p-6 rounded-lg border border-green-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-green-900">Data Ingestion</h3>
                  <Database className="text-green-600" size={24} />
                </div>
                <div className="text-2xl font-bold text-green-900">{metricsData.dataIngestion} TB/h</div>
                <div className="text-sm text-green-600">Telemetry data rate</div>
              </div>
              
              <div className="bg-yellow-50 p-6 rounded-lg border border-yellow-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-yellow-900">Active Alerts</h3>
                  <AlertTriangle className="text-yellow-600" size={24} />
                </div>
                <div className="text-2xl font-bold text-yellow-900">{metricsData.alerts}</div>
                <div className="text-sm text-yellow-600">Requiring attention</div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Architecture Components Status</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {architectureComponents.map(component => (
                  <div key={component.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-gray-900">{component.name}</h4>
                      <div className={`w-3 h-3 rounded-full ${
                        component.status === 'completed' ? 'bg-green-500' : 
                        component.status === 'running' ? 'bg-yellow-500 animate-pulse' : 'bg-gray-300'
                      }`} />
                    </div>
                    <p className="text-sm text-gray-600 mb-3">{component.description}</p>
                    <ul className="space-y-1">
                      {component.details.map((detail, idx) => (
                        <li key={idx} className="text-xs text-gray-500 flex items-center">
                          <div className="w-1 h-1 bg-gray-400 rounded-full mr-2" />
                          {detail}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'deployment':
        return (
          <div className="space-y-6 p-6">
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="font-semibold text-gray-900">Deployment Progress</h3>
                <div className="flex space-x-2">
                  <button
                    onClick={startSimulation}
                    disabled={simulationRunning}
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                  >
                    <Play size={16} className="mr-2" />
                    Start Deployment
                  </button>
                  <button
                    onClick={resetSimulation}
                    className="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                  >
                    <RotateCcw size={16} className="mr-2" />
                    Reset
                  </button>
                </div>
              </div>

              <div className="mb-6">
                <div className="flex justify-between text-sm text-gray-600 mb-2">
                  <span>Overall Progress</span>
                  <span>{Math.round(deploymentProgress)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="bg-blue-600 h-3 rounded-full transition-all duration-500"
                    style={{ width: `${deploymentProgress}%` }}
                  />
                </div>
              </div>

              <div className="space-y-4">
                {steps.map((step, index) => (
                  <div key={index} className="flex items-center p-4 border border-gray-200 rounded-lg">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-4 ${
                      step.status === 'completed' ? 'bg-green-100 text-green-600' :
                      index === currentStep && simulationRunning ? 'bg-yellow-100 text-yellow-600' :
                      'bg-gray-100 text-gray-400'
                    }`}>
                      {step.status === 'completed' ? (
                        <CheckCircle size={16} />
                      ) : (
                        <span className="text-sm font-medium">{index + 1}</span>
                      )}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{step.name}</h4>
                      <div className="text-sm text-gray-600">
                        {step.status === 'completed' ? 'Completed' :
                         index === currentStep && simulationRunning ? 'In Progress...' :
                         'Pending'}
                      </div>
                    </div>
                    {index === currentStep && simulationRunning && (
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600" />
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'security':
        return (
          <div className="space-y-6 p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">Security Posture</h3>
                  <Shield className="text-green-600" size={24} />
                </div>
                <div className="text-3xl font-bold text-green-600 mb-2">{metricsData.compliance}%</div>
                <div className="text-sm text-gray-600">Overall compliance score</div>
              </div>

              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">System Uptime</h3>
                  <Monitor className="text-blue-600" size={24} />
                </div>
                <div className="text-3xl font-bold text-blue-600 mb-2">{metricsData.uptime}%</div>
                <div className="text-sm text-gray-600">Last 30 days</div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Compliance Status</h3>
              <div className="space-y-4">
                {complianceItems.map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-center">
                      <div className={`w-3 h-3 rounded-full mr-3 ${
                        item.status === 'compliant' ? 'bg-green-500' : 'bg-yellow-500'
                      }`} />
                      <span className="font-medium text-gray-900">{item.name}</span>
                    </div>
                    <div className="flex items-center">
                      <span className="text-sm text-gray-600 mr-2">{item.score}%</span>
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full ${
                            item.status === 'compliant' ? 'bg-green-500' : 'bg-yellow-500'
                          }`}
                          style={{ width: `${item.score}%` }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'monitoring':
        return (
          <div className="space-y-6 p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="text-sm text-blue-600 mb-1">CPU Usage</div>
                <div className="text-2xl font-bold text-blue-900">67%</div>
              </div>
              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <div className="text-sm text-green-600 mb-1">Memory Usage</div>
                <div className="text-2xl font-bold text-green-900">54%</div>
              </div>
              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <div className="text-sm text-yellow-600 mb-1">Network I/O</div>
                <div className="text-2xl font-bold text-yellow-900">1.2 GB/s</div>
              </div>
              <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                <div className="text-sm text-purple-600 mb-1">Storage</div>
                <div className="text-2xl font-bold text-purple-900">78%</div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Recent Alerts</h3>
              <div className="space-y-3">
                <div className="flex items-start p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <AlertTriangle size={16} className="text-yellow-600 mr-3 mt-1" />
                  <div>
                    <div className="font-medium text-gray-900">High Memory Usage</div>
                    <div className="text-sm text-gray-600">Production VM cluster exceeding 80% memory utilization</div>
                    <div className="text-xs text-gray-500 mt-1">2 minutes ago</div>
                  </div>
                </div>
                <div className="flex items-start p-3 bg-green-50 border border-green-200 rounded-lg">
                  <CheckCircle size={16} className="text-green-600 mr-3 mt-1" />
                  <div>
                    <div className="font-medium text-gray-900">Backup Completed</div>
                    <div className="text-sm text-gray-600">Daily backup of production databases successful</div>
                    <div className="text-xs text-gray-500 mt-1">1 hour ago</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'costs':
        return (
          <div className="space-y-6 p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">Monthly Spend</h3>
                  <DollarSign className="text-green-600" size={24} />
                </div>
                <div className="text-3xl font-bold text-gray-900">${metricsData.costs.toLocaleString()}</div>
                <div className="text-sm text-green-600">↓ 12% vs last month</div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">Cost per Vehicle</h3>
                  <Settings className="text-blue-600" size={24} />
                </div>
                <div className="text-3xl font-bold text-gray-900">${(metricsData.costs / metricsData.vehicles).toFixed(2)}</div>
                <div className="text-sm text-blue-600">Operational efficiency</div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">Savings YTD</h3>
                  <Users className="text-purple-600" size={24} />
                </div>
                <div className="text-3xl font-bold text-gray-900">$127K</div>
                <div className="text-sm text-purple-600">Through optimization</div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Cost Optimization Recommendations</h3>
              <div className="space-y-3">
                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div className="font-medium text-green-900">Reserved Instances</div>
                  <div className="text-sm text-green-700">Save up to $8,400/month by purchasing reserved instances for predictable workloads</div>
                </div>
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="font-medium text-blue-900">Right-sizing</div>
                  <div className="text-sm text-blue-700">Potential savings of $2,100/month by right-sizing over-provisioned VMs</div>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Automotive Cloud Landing Zone
          </h1>
          <p className="text-gray-600">
            Interactive demonstration of Azure-based enterprise cloud platform for automotive industry
          </p>
        </div>

        <div className="mb-6">
          <nav className="flex space-x-8">
            {[
              { id: 'overview', label: 'Overview', icon: Cloud },
              { id: 'deployment', label: 'Deployment', icon: Settings },
              { id: 'security', label: 'Security', icon: Shield },
              { id: 'monitoring', label: 'Monitoring', icon: Monitor },
              { id: 'costs', label: 'Cost Management', icon: DollarSign }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                <tab.icon size={18} className="mr-2" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 min-h-96">
          <TabContent />
        </div>

        <div className="mt-6 bg-white rounded-lg border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2 ${simulationRunning ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`} />
                <span className="text-sm text-gray-600">
                  System Status: {simulationRunning ? 'Deploying...' : 'Ready'}
                </span>
              </div>
              <div className="text-sm text-gray-600">
                Last Updated: {new Date().toLocaleTimeString()}
              </div>
            </div>
            <div className="flex items-center space-x-4 text-sm text-gray-600">
              <span>Region: West Europe</span>
              <span>Environment: Production</span>
              <span>Version: 2.1.0</span>
            </div>
          </div>
        </div>

        <div className="mt-8 text-center text-gray-500">
          <p className="mb-2">
            This interactive demo showcases the key components and capabilities of an automotive industry cloud landing zone built on Microsoft Azure.
          </p>
          <p className="text-sm">
            Features include real-time IoT data processing, AI/ML integration, comprehensive security, and enterprise-grade governance.
          </p>
        </div>
      </div>
    </div>
  );
};

export default AutomotiveLandingZoneDemo;
